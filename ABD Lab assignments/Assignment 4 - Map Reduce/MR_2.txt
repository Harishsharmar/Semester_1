import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class temp1 {
    public static class temp_mapper1 extends Mapper<LongWritable,Text,Text,FloatWritable>{
        public void map(LongWritable key,Text values, Context context)throws IOException,InterruptedException{
            String line = values.toString();
            String[] cols = line.split(" ");
            context.write(new Text(cols[2]),new FloatWritable(Float.parseFloat(cols[1])));
        }
    }
    
    public static class temp_reducer_1 extends Reducer<Text,FloatWritable,Text,FloatWritable>{
        public void reduce(Text key,Iterable<FloatWritable> values,Context context) throws IOException,InterruptedException{
            float min = 100,max = 0;
            for(FloatWritable x:values) {
                if(x.get() < min) {
                    min = x.get();
                }
                if(x.get() > max) {
                    max = x.get();
                }
            }
            context.write(key,new FloatWritable(min));
            context.write(key,new FloatWritable(max));
        }
    }
    
    public static class temp_mapper2 extends Mapper<LongWritable,Text,Text,IntWritable>{
        public void map(LongWritable key,Text values, Context context)throws IOException,InterruptedException{
            String line = values.toString();
            String[] cols = line.split(" ");
            context.write(new Text(cols[2]),new IntWritable(1));
        }
    }
    
    public static class temp_reducer_2 extends Reducer<Text,IntWritable,Text,IntWritable>{
        public void reduce(Text key,Iterable<IntWritable> values,Context context) throws IOException,InterruptedException{
            int count = 0;
        	for(IntWritable x:values) {
                count += x.get();
            }
            context.write(key,new IntWritable(count));
        }
    }
    
    public static class temp_mapper3 extends Mapper<LongWritable,Text,Text,FloatWritable>{
        public void map(LongWritable key,Text values, Context context)throws IOException,InterruptedException{
            String line = values.toString();
            String[] cols = line.split(" ");
            context.write(new Text(cols[2]),new FloatWritable(Float.parseFloat(cols[1])));
        }
    }
    
    public static class temp_reducer_3 extends Reducer<Text,FloatWritable,Text,FloatWritable>{
        public void reduce(Text key,Iterable<FloatWritable> values,Context context) throws IOException,InterruptedException{
            String city = "Bangalore";
        	float min = 100,max = 0;
        	if((key.toString()).equals(city)) {
        		for(FloatWritable x:values) {
                    if(x.get() < min) {
                        min = x.get();
                    }
                    if(x.get() > max) {
                        max = x.get();
                    }
                }
        		context.write(key,new FloatWritable(min));
                context.write(key,new FloatWritable(max));
        	}
            
        }
    }
    
    public static class temp_mapper4 extends Mapper<LongWritable,Text,Text,FloatWritable>{
        public void map(LongWritable key,Text values, Context context)throws IOException,InterruptedException{
            String line = values.toString();
            String cols[] = line.split(" ");
            String par = context.getConfiguration().get("CITY");
            if(cols[2].equals(par)) {
            	//context.write(new Text(par),new FloatWritable(Float.parseFloat(cols[1])));
            	context.write(new Text(cols[2])),new FloatWritable(Float.parseFloat(cols[1])));
            }        
        }
    }
    
    public static class temp_reducer_4 extends Reducer<Text,FloatWritable,Text,FloatWritable>{
        public void reduce(Text key,Iterable<FloatWritable> values,Context context) throws IOException,InterruptedException{
        	float min = 100,max = 0;
            for(FloatWritable x:values) {
                if(x.get() < min) {
                    min = x.get();
                }
                if(x.get() > max) {
                    max = x.get();
                }
            }
            //context.write(new Text("HI"), new FloatWritable(1));
            context.write(key,new FloatWritable(min));
            context.write(key,new FloatWritable(max));
            
        }
    }
    
    public static void main(String[] args) throws Exception{
        // TODO Auto-generated method stub
    	
        Configuration conf1 = new Configuration();
        Job job = Job.getInstance(conf1, "temp-min-max");
        job.setJarByClass(temp1.class);
        job.setMapperClass(temp_mapper1.class);
        job.setReducerClass(temp_reducer_1.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(FloatWritable.class);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        job.waitForCompletion(true);
        
        Configuration conf2 = new Configuration();
        Job job1 = Job.getInstance(conf2, "count");
        job1.setJarByClass(temp1.class);
        job1.setMapperClass(temp_mapper2.class);
        job1.setReducerClass(temp_reducer_2.class);
        job1.setOutputKeyClass(Text.class);
        job1.setOutputValueClass(IntWritable.class);
        FileInputFormat.addInputPath(job1, new Path(args[0]));
        FileOutputFormat.setOutputPath(job1, new Path(args[2]));
        job1.waitForCompletion(true);
        
        Configuration conf3 = new Configuration();
        Job job2 = Job.getInstance(conf3, "Bangalore-temp");
        job2.setJarByClass(temp1.class);
        job2.setMapperClass(temp_mapper3.class);
        job2.setReducerClass(temp_reducer_3.class);
        job2.setOutputKeyClass(Text.class);
        job2.setOutputValueClass(FloatWritable.class);
        FileInputFormat.addInputPath(job2, new Path(args[0]));
        FileOutputFormat.setOutputPath(job2, new Path(args[3]));
        job2.waitForCompletion(true);
        
        Configuration conf4 = new Configuration();
        conf4.set("CITY",args[5]);
        Job job3 = Job.getInstance(conf4, "Temp for given city");
        job3.setJarByClass(temp1.class);
        job3.setMapperClass(temp_mapper4.class);
        job3.setReducerClass(temp_reducer_4.class);
        job3.setOutputKeyClass(Text.class);
        job3.setOutputValueClass(FloatWritable.class);
        FileInputFormat.addInputPath(job3, new Path(args[0]));
        FileOutputFormat.setOutputPath(job3, new Path(args[4]));
        //job3.waitForCompletion(true);
        System.exit(job3.waitForCompletion(true)?0:1);
    }
}
