package student;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Student {
	public static class stud_mapper1 extends Mapper<LongWritable,Text,Text,IntWritable>{
		public void map(LongWritable key,Text values, Context context)throws IOException,InterruptedException{
			String line = values.toString();
			String[] words = line.split(",");
			context.write(new Text(words[1]),new IntWritable(1));
		}
	}
	
	public static class stud_mapper2 extends Mapper<LongWritable,Text,Text,IntWritable>{
		public void map(LongWritable key,Text values, Context context)throws IOException,InterruptedException{
			String line = values.toString();
			String[] words = line.split(",");
			context.write(new Text(words[2]),new IntWritable(1));
		}
	}
	public static class stud_mapper3 extends Mapper<LongWritable,Text,Text,IntWritable>{
		public void map(LongWritable key,Text values, Context context)throws IOException,InterruptedException{
			String line = values.toString();
			String[] words = line.split(",");
			context.write(new Text(words[3]),new IntWritable(1));
		}
	}
	public static class stud_mapper4 extends Mapper<LongWritable,Text,Text,IntWritable>{
		public void map(LongWritable key,Text values, Context context)throws IOException,InterruptedException{
			String line = values.toString();
			String[] words = line.split(",");
			String par = context.getConfiguration().get("INST");
			if(words[1].contentEquals(par)) {
				context.write(new Text(words[3]),new IntWritable(1));
			}			
		}
	}
	
	public static class stud_reducer1_2_3_4 extends Reducer<Text,IntWritable,Text,IntWritable>{
		public void reduce(Text key,Iterable<IntWritable> values,Context context)throws IOException,InterruptedException{
			int sum = 0;
			for(IntWritable x:values) {
				sum +=x.get();
			}
			context.write(key,new IntWritable(sum));
		}
	}
	
	public static void main(String[] args) throws Exception{
		Configuration conf1 = new Configuration();
		Job job = Job.getInstance(conf1, "stud-count");
		job.setJarByClass(Student.class);
		job.setMapperClass(stud_mapper1.class);
		job.setReducerClass(stud_reducer1_2_3_4.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		job.waitForCompletion(true);
		
		Configuration conf2 = new Configuration();
		Job job1 = Job.getInstance(conf2, "stud-prg-count");
		job1.setJarByClass(Student.class);
		job1.setMapperClass(stud_mapper2.class);
		job1.setReducerClass(stud_reducer1_2_3_4.class);
		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job1, new Path(args[0]));
		FileOutputFormat.setOutputPath(job1, new Path(args[2]));
		job1.waitForCompletion(true);
		
		Configuration conf3 = new Configuration();
		Job job2 = Job.getInstance(conf3, "gender-count");
		job2.setJarByClass(Student.class);
		job2.setMapperClass(stud_mapper3.class);
		job2.setReducerClass(stud_reducer1_2_3_4.class);
		job2.setOutputKeyClass(Text.class);
		job2.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job2, new Path(args[0]));
		FileOutputFormat.setOutputPath(job2, new Path(args[3]));
		job2.waitForCompletion(true);
		
		Configuration conf4 = new Configuration();
		conf4.set("INST",args[5]);
		Job job3 = Job.getInstance(conf4, "inst-gender-count");
		job3.setJarByClass(Student.class);
		job3.setMapperClass(stud_mapper4.class);
		job3.setReducerClass(stud_reducer1_2_3_4.class);
		job3.setOutputKeyClass(Text.class);
		job3.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job3, new Path(args[0]));
		FileOutputFormat.setOutputPath(job3, new Path(args[4]));
		System.exit(job3.waitForCompletion(true)?0:1);
	}
}

